/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    
    // Confluent repository for Schema Registry and other Confluent packages
    maven {
        url "https://packages.confluent.io/maven/"
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // Kafka Dependencies - Latest versions for cutting-edge features
    implementation 'org.apache.kafka:kafka-clients:3.6.1'
    implementation 'org.apache.kafka:kafka-streams:3.6.1'
    implementation 'org.apache.kafka:kafka-streams-test-utils:3.6.1'
    
    // Schema Registry and Avro Support
    implementation 'io.confluent:kafka-avro-serializer:7.5.3'
    implementation 'io.confluent:kafka-schema-registry-client:7.5.3'
    implementation 'io.confluent:kafka-streams-avro-serde:7.5.3'
    implementation 'org.apache.avro:avro:1.11.3'
    
    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.1'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.14'
    
    // Metrics and Monitoring
    implementation 'io.micrometer:micrometer-core:1.12.2'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.12.2'
    
    // Configuration
    implementation 'com.typesafe:config:1.4.3'
    
    // Testing
    testImplementation 'org.testcontainers:testcontainers:1.19.3'
    testImplementation 'org.testcontainers:kafka:1.19.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    testImplementation 'org.awaitility:awaitility:4.2.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.example.kafka.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Add task to run Kafka demonstrations
task runProducer(type: JavaExec) {
    group = 'kafka'
    description = 'Run Kafka producer demonstration'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.example.kafka.producers.AdvancedProducerDemo'
}

task runConsumer(type: JavaExec) {
    group = 'kafka'
    description = 'Run Kafka consumer demonstration'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.example.kafka.consumers.AdvancedConsumerDemo'
}

task runStreams(type: JavaExec) {
    group = 'kafka'
    description = 'Run Kafka Streams demonstration'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.example.kafka.streams.StreamsDemo'
}

task runTransactionDemo(type: JavaExec) {
    group = 'kafka'
    description = 'Run Kafka transactions demonstration'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.example.kafka.transactions.TransactionDemo'
}

// Generate Avro classes from schema - commented out for now
/*
task generateAvro(type: Exec) {
    group = 'generation'
    description = 'Generate Avro classes from schemas'
    
    // Create output directory if it doesn't exist
    doFirst {
        file('src/main/java').mkdirs()
    }
    
    commandLine 'java', '-jar', 
        configurations.compileClasspath.find { it.name.startsWith('avro-tools') },
        'compile', 'schema', 'src/main/avro', 'src/main/java'
}

compileJava.dependsOn generateAvro
*/
